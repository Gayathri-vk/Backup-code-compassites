//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CNMSDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ConstructionDBEntities : DbContext
    {
        public ConstructionDBEntities()
            : base("name=ConstructionDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BlockDetail> BlockDetails { get; set; }
        public virtual DbSet<BoqDailyProcess> BoqDailyProcesses { get; set; }
        public virtual DbSet<BoqEntryDetail> BoqEntryDetails { get; set; }
        public virtual DbSet<BoqReviseDetail> BoqReviseDetails { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientMaster> ClientMasters { get; set; }
        public virtual DbSet<ClientReg> ClientRegs { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<DatabaseDetail> DatabaseDetails { get; set; }
        public virtual DbSet<FoundationDetail> FoundationDetails { get; set; }
        public virtual DbSet<LocationMaster> LocationMasters { get; set; }
        public virtual DbSet<MainItemMaster> MainItemMasters { get; set; }
        public virtual DbSet<MenuDetail> MenuDetails { get; set; }
        public virtual DbSet<ProjectDescription> ProjectDescriptions { get; set; }
        public virtual DbSet<ProjectDescriptionDetail> ProjectDescriptionDetails { get; set; }
        public virtual DbSet<ProjectMaster> ProjectMasters { get; set; }
        public virtual DbSet<SubItemMaster> SubItemMasters { get; set; }
        public virtual DbSet<SubSubItemMaster> SubSubItemMasters { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UserRoleMenu> UserRoleMenus { get; set; }
        public virtual DbSet<UserValidity> UserValidities { get; set; }
        public virtual DbSet<VariationMaster> VariationMasters { get; set; }
        public virtual DbSet<SupplierMaster> SupplierMasters { get; set; }
        public virtual DbSet<UserPassReset> UserPassResets { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<BOQLinkDetail> BOQLinkDetails { get; set; }
        public virtual DbSet<CriticalPathDetail> CriticalPathDetails { get; set; }
        public virtual DbSet<HolidayMaster> HolidayMasters { get; set; }
        public virtual DbSet<ExternalWorkDetail> ExternalWorkDetails { get; set; }
        public virtual DbSet<ExternalWorkMaster> ExternalWorkMasters { get; set; }
    
        public virtual int CreateCopyDatabaseprocedures(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCopyDatabaseprocedures", nameParameter);
        }
    
        public virtual int CreateCopyDatabaseTable(string toDatabase)
        {
            var toDatabaseParameter = toDatabase != null ?
                new ObjectParameter("toDatabase", toDatabase) :
                new ObjectParameter("toDatabase", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCopyDatabaseTable", toDatabaseParameter);
        }
    
        public virtual int CreateCopyDatabaseuser(string toDatabase)
        {
            var toDatabaseParameter = toDatabase != null ?
                new ObjectParameter("toDatabase", toDatabase) :
                new ObjectParameter("toDatabase", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCopyDatabaseuser", toDatabaseParameter);
        }
    
        public virtual int CreateCopyDatabaseView(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCopyDatabaseView", nameParameter);
        }
    }
}
